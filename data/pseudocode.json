{
    "learningActivities": [
        {
            "activity": "Values can be entered into an algorithm as part of the algorithm name or as input within the algorithm."
        },
        {
            "activity": "A variable is a string of one or more letters that acts as a placeholder that can be assigned different values. For example: x ← 5 means 'assign the value 5 to the variable x'. product ← 3 means 'assign the value 3 to the variable product'. x ← x + 1 means 'assign the value x + 1 to the variable x'."
        },
        {
            "activity": "if – then blocks provide a means of making decisions within an algorithm. Certain instructions are only followed if a condition is true. if condition is true then follow these instructions end if We can expand this process by specifying alternative instructions if the condition is false. if condition is true then follow these instructions else follow these instructions end if"
        },
        {
            "activity": "Algorithm: minimum of two numbers input a, b if a ≤ b then print a else print b end if"
        },
        {
            "activity": "Loops are used to repeat a process. How many repetitions (iterations) take place is controlled by either specifying and counting the number of times (a for loop) or by specifying a condition which must be met for the process to continue, otherwise it ends (a while loop). An example of each of these approaches is shown below: For loops provide a means of repeatedly executing the same set of instructions in a controlled way. A counter (i) is increased by one, each time through the loop. for i from 1 to n follow these instructions end for Note: We will follow the convention that 'from 1 to n' is inclusive. For example: for i from 1 to 3, i takes values 1, 2 and 3, Algorithm: First 5 perfect squares for i from 1 to 5 print i² end for While loops provide another means of repeatedly executing the same set of instructions in a controlled way. This is achieved by performing iterations as long as some condition remains true. while condition is true follow these instructions end while Algorithm: Perfect squares less than 1000 x ← 1 while x² < 1000 x ← x + 1 print (x - 1)² end while"
        },
        {
            "activity": "Functions are sections of pseudocode that can be used to complete a specific task. Once a function is defined, it can be used (called) within another algorithm. A function takes one or more input values and returns an output value. define function_name (input for function): follow these instructions return output define factorial(n): product ← 1 for i from 1 to n product ← product x i end for return product"
        },
        {
            "activity": "Algorithm define f(x) return (enter required function rule) sum ← 0 a ← lowest x-value b ← highest x-value n ← number of trapeziums h ← (b-a)/n left ← a right ← a + h for i from 1 to n do strip ← 0.5(f(left) + f(right)) x h sum ← sum + strip left ← left + h right ← right + h end for print sum Comments The trapezium method algorithm gives an approximation to ∫ᵇₐ f(x) dx. Variable names have been chosen to clarify the purpose of the algorithm. sum is printed. The trapezium algorithm may be implemented by using a function structure. The function f must be defined first. define Trap(a, b, n) (Insert algorithm as shown) return (sum) The advantage of this is that it may be implemented simply by changing the values of the variables."
        },
        {
            "activity": "Algorithm sum ← 0 for i from 1 to 1000 do outcome ← 0 count ← 0 while outcome ≠ 6 do outcome ← randominteger(1, 6) count ← count + 1 end while sum ← sum + count end for print sum/1000 Comments Many devices have a random number function. We use the function: randominteger(1, 6) to return one of the numbers 1,2,3,4,5,6 randomly. The while loop continues until the value 6 is given by randominteger(1, 6). The variable count gives the number of iterations before a 6. The for loop repeats this 1000 times. The variable sum gives the total of the 1000 values of count. The print statement is for the average"
        },
        {
            "activity": "Algorithm define f(x) return(enter required function rule) a ← lower guess b ← upper guess c ← (a + b)/2 t ← tolerance if f(a) × f(b) > 0 then print 'Incorrect initial guesses' else while b - a > 2×t do if f(a)×f(c) < 0 then b ← c else a ← c end if c ← (a+b)/2 end while print(c) end if Comments Function f(x) is chosen. For example: define f(x) return x² – 2 Good choices for a and b are a = 1 and a = 2. (f(1) f(2) > 0.) If this is the choice we go to the else section of the algorithm and the outer if statement has done its job. The while loops requires that we continue the iteration until the desired accuracy is reached. The if statement inside the algorithm ensures that we continue to choose values for which there is a sign difference. For each iteration an average of the new pair is determined by the if statement is calculated."
        },
        {
            "activity": "Consider a differential equation dᵞ/dx = f(x,y) Algorithm define function(x, y) return(enter required function rule) define euler(x₀, y₀, h, xfin) y ← y₀ x ← x₀ while x < xfin do y ← y + h x f(x, y) x ← x + h end while return (xfin, y) Comments The differential equation is dᵞ/dx = f(x,y) For example f(x,y) = xy. x₀ is the initial x value and h₀ the corresponding y value. Let h = 0.1 If you start at (1,2) the next ordered pair is (1.1, 2.2) and the following (1.2, 2.442) The iteration continue for the required number of iterations."
        }
    ],
    "assessmentTasks": [
        {
            "title": "Sample questions ",
            "task": "Q1: a ← 2; while a < 20 do a ← 2 * a; end while; print(a), Q2: sum ← 2; for x from 1 to 3 do for y from 1 to 2 do sum ← sum + x + y; end for; end for; print(sum), Q3: define f(x) = 2·eˣ – 17; a ← 2; b ← 3; c ← (a+b)/2; count ← 0; while b – a > 0.002 do count ← count+1; if f(a)*f(c)<0 then b←c; else a←c; end if; c←(a+b)/2; end while, Q4: count ← 0; for i from 1 to 6 do for j from 1 to 6 do for k from 1 to 6 do count ← count+1; print(count, i+j+k); end for; end for; end for, Q5a: for i from 1 to 4 do print(i³ + 2); end for, Q5b: for i from 1 to 5 do if i² < 10 then print(i²) else print(i² + 2); end if; end for, Q6: Question: For a given value of V, describe the algorithm using pseudocode to find the integer valued side lengths that maximise the surface area of the box. Answer: maxS ← –∞; for x from 1 to V do for y from 1 to V do S ← x*y + 2*V/x + 2*V/y; if S > maxS then maxS←S; bestX←x; bestY←y; end if; end for; end for; print(bestX, bestY)"
        }
    ]
}
